add2 <-function(x, y) {
x+y
}
add2(2,3)
?read.csv
debug(ls)
ls()
?str
str(mean)
str(summary)
?str
str(ls)
x<-rnorm(100,2,4)
hist(x)
hist(x, 20)
str(x)
summary(x)
library(datasets)
head(airquality)
str(airquality)
s <- split(airquality, airquality$Month)
str(s)
h <- rnorm(100)
hist(h, 40)
q<-rnorm(1000)
hist(q, 40)
str(rnorm)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
str(rpois)
hist(rpois(10,1))
hist(rpois(10,2))
hist(rpois(1000,1))
hist(rpois(1000,2))
hist(rpois(1000,3))
hist(rpois(1000,1),50)
hist(rpois(1000,2),50)
hist(rpois(1000,3),50)
ppois(2,2)
ppois(4,2)
ppois(6,2)
x<-rnorm(100)
e<-rnorm(100, 0, 2)
y <- 0.5+2*x+e
summary(y)
plot(x,y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
system.time(read.lines("http://www.svd.se"))
system.time(readLines("http://www.svd.se"))
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.netigate.net"))
system.time(readLines("http://www.netigate.net/sv/"))
system.time(readLines("https://www.synopticom.com/"))
system.time(readLines("https://www.synopticom.com/"))
hilbert <- function(n){
i <- 1:n
1/outer(i-1, i, "+")
}
hilbert(1000)
?svd
system.time(svd(herbert(1000)))
system.time(svd(hilbert(1000)))
swirl()
swirl
install.packages("swirl")
library(swirl)
swirl()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(fips2)
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(n=5, lambda=10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
1:20
pi:10
15:1
?':'
seq(1:20)
seq(1,20)
seq(1, 20, 0.5)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my:seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- c(num_vect < 1)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Jonatan")
ny_name
my_name
paste(my_name, collaspe=" ")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep= " ")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[x== c(3, 5, 7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
install.packages("sqldf")
library("sqldf")
install.packages("RSQLite")
library("RSQLite")
install.packages("sqldf")
library("sqldf")
install.packages("RSQLite")
sqldf("select pwgtp1 from acs")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
sqldf("select pwgtp1 from acs")
install.packages("RSQLite")
install.packages("RSQLite")
library("RSQLite")
library(RSQLite)
install.packages("sqldf")
library(sqldf)
sessionInfo()
sessionInfo()
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
dim(spam)
str(spam[,1:5])
set.seed(3435)
trainIndicator <- rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 0,]
testSpam <- spam[trainIndicator == 1,]
names(trainSpam)
head(trainSpam)
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1~trainSpam$type))
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hCluster = hclust(dist(t(log10(trainSpam[,1:57]))))
hCluster = hclust(dist(t(log10(trainSpam[,1:55]))))
hCluster = hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hCluster)
trainSpam$numType = as.numeric(trainSpam$type) -1
costFunction = function(x,y) sum(x!=(y>0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam[i], response="numType"))
glmFit = glm(lmFormula, family = "binomial", data=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type) -1
costFunction = function(x,y) sum(x!=(y>0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response="numType")
glmFit = glm(lmFormula, family = "binomial", data=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
names(trainSpam)[which.max(cvError)]
?glmfit
?glmFit
?glm
class(trainSpam$numType)
str(trainSpam$numType)
summary(trainSpam$numType)
table(numtype, type)
table(trainSpam$numtype, trainSpam$type)
str(trainSpam)
table(trainSpam$numType, trainSpam$type)
predictionmodel = glm(numType ~charDollar, family="binomial", data=trainSpam)
predictionmodel = glm(numType ~charDollar, family="binomial", data=trainSpam)
#get predictions on the testset
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
#Classify as 'spam' for those with probability > 0.5
predictionmodel = glm(numType ~charDollar, family="binomial", data=trainSpam)
#get predictions on the testset
predictionTest = predict(predictionmodel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
#Classify as 'spam' for those with probability > 0.5
predictionmodel = glm(numType ~charDollar, family="binomial", data=trainSpam)
#get predictions on the testset
predictionTest = predict(predictionmodel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
#Classify as 'spam' for those with probability > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
#Classify as 'spam' for those with probability > 0.5
predictedSpam[predictionmodel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
table(predictedSpam, testSpam$type)
dim(predictedSpam) dim(testSpam$type)
dim(predictedSpam), dim(testSpam$type)
dim(predictedSpam)
dim(testSpam$type)
testSpam$type
print(predictedSpam)
tail(predictedSpam)
install.packages("slidify")
```{r jonatanchunk}
install.packages("xtable")
library(knitr)
?opts_chunk
getwd()
list.files()
getwd()
setwd("/Users/jonatanhedin/datasciencecoursera")
getwd()
list.files()
list.files(/Users/jonatanhedin/datasciencecoursera/reproducibleResearch")
setwd(/Users/jonatanhedin/datasciencecoursera/reproducibleResearch")
setwd("/Users/jonatanhedin/datasciencecoursera/reproducibleResearch")
getwd()
list.files()
getwd()
setwd(Users/jonatanhedin/RepData_PeerAssessment1")
""
setwd("Users/jonatanhedin/RepData_PeerAssessment1")
getwd()
setwd("/Users/jonatanhedin/RepData_PeerAssessment1")
getwd()
PA1_template.Rmd
?download.file
?unzip
acticity <- data.frame(read.csv("acticity.csv"))
activity <- data.frame(read.csv("acticity.csv"))
activity <- data.frame(read.csv("activity.csv"))
rm(my_data)
rm(my_pois)
rm(my_veector)
rm(my_vector)
rm(cm)
rm(my_matrix2)
rm(cnames)
rm(h)
rm(my_char)
rm(my_na)
rm(my_name)
rm(my_seq)
rm(num_vect)
rm(q)
rm(s)
rm(tf)
tm(vect)
rm(vect)
rm(vect2)
rm(x)
rm(y)
rm(z)
rm(patients)
rm(hilbert)
rm(flips2)
rm(e)
rm(fluips)
rm(flips)
rm(my_matrix)
table(activity$steps)
table(activity$date)
table(activity$interval)
?download.file
fileURL
fileURL="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileURL, "activity.zip")
fileURL
download.file(fileURL, "activity.zip", mode="wb")
fileURL="http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileURL, "activity.zip", mode="wb")
rm(fileURL)
rm(activity)
fileURL="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileURL, "activity.zip", mode="wb", method="curl")
unzip("activity.zip")
activity <- data.frame(read.csv("activity.csv"))
activity$date <- strptime(activity$date, format="%Y-%m-%d")
class(acticity$date)
class(activity$date)
qplot(steps~date)
?qplot
library(lattice)
?qplot
xyplot(steps~date, data=acticity)
xyplot(steps~date, data=activity)
hist(activity$date)
hist(activity$date, breaks=10)
hist(activity$date, breaks=100)
summary(activity$date)
summary(activity$steps)
?sapply
sapply(activity$steps, mean())
sapply(activity, mean(steps))
sapply(activity, mean(activity$steps))
sapply(activity$steps, mean())
sapply(activity$interval, mean())
acticity$steps
activity$steps
table(activity$date, activity$steps)
sapply(activity$interval, mean
)
sapply(activity$interval, mean)
aggregate(activity$steps, activity$date, mean)
?aggregate
?strptime
?day
?Day
strptime(activity$date, format="%d")
strptime(activity$date, format="%c")
strftime(activity$date, format="%d")
table(strftime(activity$date, format="%d"))
aggregate(activity$steps, strftime(activity$date, format="%d"), mean)
activity$day <- strftime(activity$date, format="%d")
aggregate(activity$steps, sactivity$day, mean)
aggregate(activity$steps, activity$day, mean)
activity$day <- as.numeric(strftime(activity$date, format="%d"))
activity$day <- as.numeric(strftime(activity$date, format="%d"))
aggregate(activity$steps, activity$day, mean)
activity$day <- as.factor(strftime(activity$date, format="%d"))
aggregate(activity$steps, activity$day, mean)
?aggregate
aggregate(steps ~ day, data=activity, mean)
?median
aggregate(steps ~ day, data=activity, median)
aggregate(steps ~ day, data=activity, median(na.rm=TRUE))
aggregate(steps ~ day, data=activity, FUN=c("count", "mean","median",), na.rm=TRUE)
aggregate(steps ~ day, data=activity, FUN=c("count", "mean","median"), na.rm=TRUE)
aggregate(steps ~ day, data=activity, FUN=c("count", "mean","median"))
